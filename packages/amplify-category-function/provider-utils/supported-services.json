{
	"Lambda": {
		"inputs": [
			{
				"key": "resourceName",
				"question": "Provide a friendly name for your resource to be used as a label for this category in the project:",
				"validation": {
					"operator": "regex",
					"value": "^[a-zA-Z0-9]+$",
					"onErrorMsg": "Resource name should be alphanumeric"
				},
				"required": true
			},
			{
				"key": "functionName",
				"question": "Provide the AWS Lambda function name:",
				"validation": {
					"operator": "regex",
					"value": "^[a-zA-Z0-9._-]+$",
					"onErrorMsg": "You can use the following characters: a-z A-Z 0-9 . - _"
				},
				"required": true
			},
			{
				"key": "handlerFilename",
				"question": "Provide the name of the script file that contains your handler function:",
				"validation": {
					"operator": "regex",
					"value": "^[a-zA-Z0-9._-]+$",
					"onErrorMsg": "You can use the following characters: a-z A-Z 0-9 . - _"
				},
				"required": true
			},
			{
				"key": "handlerName",
				"question": "Provide the name of the handler function to invoke:",
				"validation": {
					"operator": "regex",
					"value": "^[a-zA-Z0-9._-]+$",
					"onErrorMsg": "You can use the following characters: a-z A-Z 0-9 . - _"
				},
				"required": true
			},
			{
				"key": "functionTemplate",
				"question": "Choose the function template that you want to use:",
				"type": "list",
				"options": [
					{
						"name": "Hello world function",
						"value": "helloWorld"
					},
					{
						"name": "CRUD function for Amazon DynamoDB table (Integration with Amazon API Gateway and Amazon DynamoDB)",
						"value": "crud"
					},
					{
						"name": "Serverless express function (Integration with Amazon API Gateway)",
						"value": "serverless"
					},
					{
						"name": "Custom EventSourceMapping Lambda Trigger",
						"value": "lambdaTrigger"
					}
					
				],
				"required": true
			},
			{

				"key": "dynamoDbType",
				"type": "list",
				"question": "Choose a DynamoDB data source option",
				"options": [{
						"name": "Use DynamoDB table configured in the current Amplify project",
						"value": "currentProject"
					},
					{
						"name": "Create a new DynamoDB table",
						"value": "newResource"
					}
				]
			},
			{

				"key": "dynamoDbResources",
				"type": "list",
				"question": "Choose from one of the already configured DynamoDB tables"
			},
			{

				"key": "dynamodbTableChoice",
				"type": "list",
				"question": "Choose a DynamoDB table:",
				"required": true
			},
			{

				"key": "dynamoRegion",
				"type": "list",
				"question": "Specify a Region:"
			},
			{
				"key": "eventName",
				"question": "Provide the relative path to the event:",
				"validation": {
					"operator": "regex",
					"value": "^[a-zA-Z0-9/._-]+?\\.json$",
					"onErrorMsg": "You should provide correct unix-like path to .json file"
				},
				"required": true
			},
			{
				"key": "eventSourceType",
				"question": "What event source do you want to associate with Lambda trigger",
				"type": "list",
				"options": [{
					"name": "Amazon Kinesis",
					"value": "kinesis"
				}, {
					"name": "Amazon Simple Queue Service",
					"value": "sqs"
				}, {
					"name": "Amazon DynamoDB Stream",
					"value": "dynamoDB"
				}],
				"required": true
			},
			{
				"key": "dynamoDbStreamKind",
				"question": "Choose a DynamoDB event source option",
				"type": "list",
				"options": [{
					"name": "Use API category graphql @model backed DynamoDB table configured in the current Amplify project",
					"value": "graphqlModelTable"
				}, 
				{
					"name": "Use storage category DynamoDB table configured in the current Amplify project",
					"value": "storageDynamoDBTable"
				},
				{
					"name": "Provide the ARN of DynamoDB stream directly",
					"value": "dynamoDbStreamRawARN"
				}],
				"required": true
			},
			{
				"key": "amazonKinesisStreamARN",
				"question": "Provide the ARN of Amazon Kinesis data stream or a stream consumer",
				"validation": {
					"operator": "regex",
					"value": "arn:(aws[a-zA-Z0-9-]*):([a-zA-Z0-9\\-])+:([a-z]{2}(-gov)?-[a-z]+-\\d{1})?:(\\d{12})?:(.*)",
					"onErrorMsg": "ARN format is invalid"
				},
				"required": true
			},
			{
				"key": "amazonSQSQueueARN",
				"question": "Provide the ARN of Amazon SQS queue",
				"validation": {
					"operator": "regex",
					"value": "arn:(aws[a-zA-Z0-9-]*):([a-zA-Z0-9\\-])+:([a-z]{2}(-gov)?-[a-z]+-\\d{1})?:(\\d{12})?:(.*)",
					"onErrorMsg": "ARN format is invalid"
				},
				"required": true
			},
			{
				"key": "dynamoDbARN",
				"question": "Provide the ARN of Amazon DynamoDB stream",
				"validation": {
					"operator": "regex",
					"value": "arn:(aws[a-zA-Z0-9-]*):([a-zA-Z0-9\\-])+:([a-z]{2}(-gov)?-[a-z]+-\\d{1})?:(\\d{12})?:(.*)",
					"onErrorMsg": "ARN format is invalid"
				},
				"required": true
			},
			{
				"key": "dynamoDbAPICategoryName",
				"type": "list",
				"question": "Please choose an API to associate with?"
			},
			{
				"key": "Please type in name of a @model to associate with",
				"validation": {
					"operator": "regex",
					"value": "^[a-zA-Z0-9._-]+$",
					"onErrorMsg": "You can use the following characters: a-z A-Z 0-9 . - _"
				},
				"required": true
			}
		],
		"defaultValuesFilename": "lambda-defaults.js",
		"serviceWalkthroughFilename": "lambda-walkthrough.js",
		"cfnFilename": "lambda-cloudformation-template.json.ejs",
		"provider": "awscloudformation"
	}
}
